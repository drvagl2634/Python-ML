import numpy as np

# # Task 1.1: Creating Arrays

# # 1D array 
# array_1 = np.arange(1, 11)
# # [ 1  2  3  4  5  6  7  8  9 10]

# # 2D array 
# array_2 = np.arange(1, 10).reshape(3, 3)
# #  [[1 2 3]
# #  [4 5 6]
# #  [7 8 9]]


# # 3D array 
# array_3 = np.random.random(size=(3,5,3))

# # [[[0.05172483 0.03422188 0.70614354]
# #   [0.31700106 0.2007625  0.43827837]
# #   [0.70942055 0.48297352 0.16497463]
# #   [0.39293635 0.86424137 0.55206543]
# #   [0.19617297 0.78342425 0.41560642]]

# #  [[0.72609534 0.03642539 0.86055202]
# #   [0.94807527 0.32915841 0.23614317]
# #   [0.14478331 0.99019009 0.78550339]
# #   [0.06296025 0.71302465 0.98741991]
# #   [0.65631992 0.48079435 0.73575109]]

# #  [[0.04683876 0.04739956 0.93417858]
# #   [0.57121855 0.73185838 0.72855787]
# #   [0.15021761 0.90692148 0.20285787]
# #   [0.83048448 0.24455228 0.95362065]
# #   [0.90015066 0.86916544 0.77719587]]]



# # Task 1.2: Display shape, size, and datatype

# # For 1D array
# print(array_1.shape,array_1.size,array_1.dtype)
# # (10,) 10 int32


# # For 2D array
# print(array_2.shape,array_2.size,array_2.dtype)
# # (3, 3) 9 int32

# # For 3D array
# print(array_3.shape,array_3.size,array_3.dtype)
# # (3, 5, 3) 45 float64



# # Task 2.1 
# data = [10, 20, 30, 40, 50, 60, 70, 80, 90]
# array = np.array(data)

# # Task 2.2:

# first_three = array[:3]
# alternate_elements = array[::2]
# reversed_array = array[::-1]

# # Task 2.3
# print(array)
# # [10 20 30 40 50 60 70 80 90]

# print(first_three)
# # [10 20 30]

# print(alternate_elements)
# # [10 30 50 70 90]

# print(reversed_array)
# # [90 80 70 60 50 40 30 20 10]

# # Task 3.1 
# A = np.random.randint(1, 20, size=5)
# B = np.random.randint(1, 20, size=5)
# print(A)
# # [17  3 14 13 12]
# print(B)
# # [13 12 14  2 18]

# # Task 3.2

# print("Addition:", A+B)
# # [30 15 28 15 30]

# print("Subtraction:", A-B)
# # [ 4 -9  0 11 -6]

# print("Multiplication:", A*B)
# # [221  36 196  26 216]

# print("Division:", A/B)
# # [1.30769231 0.25       1.         6.5        0.66666667]

# # Dot product
# print(np.dot(A, B))
# # 695

# print(np.mean(A))
# # 11.8
# print(np.median(A))
# # 13.0
# print(np.std(A))
# # 4.707440918375928
# print(np.var(A))
# # 22.160000000000004
# print(np.max(B),np.argmax(B))
# # 18 4
# print(np.min(B),np.argmin(B))
# # 2 3

# # Task 4.1

# arr1 = np.arange(1, 13)
# print(arr1)

# # Task 4.2
# arr2 = arr1.reshape(4, 3)
# print(arr2)

# arr3 = arr1.reshape(2, 2, 3)
# print(arr3)

# trans = arr2.T  
# print(trans)

# print("Original 1D array:\n", arr1)
# print("\nReshaped to 2D (4, 3):\n", arr2)
# print("\nReshaped to 3D (2, 2, 3):\n", arr3)
# print("\nTransposed 2D array:\n", trans)
# print("Shape of Transposed 2D array:", trans.shape)

# # [ 1  2  3  4  5  6  7  8  9 10 11 12]

# #  [[ 1  2  3]
# #  [ 4  5  6]
# #  [ 7  8  9]
# #  [10 11 12]]

# #  [[[ 1  2  3]
# #   [ 4  5  6]]

# #  [[ 7  8  9]
# #   [10 11 12]]]


# #  [[ 1  4  7 10]
# #  [ 2  5  8 11]
# #  [ 3  6  9 12]]

# # (3, 4)


# # arr=np.random.randint(10,51,size=15)
# # print(arr)

# # # ques 2
# # print(arr[arr>25])
# # arr[arr>25]=0
# # print(arr)
# # print(np.sum(arr%5==0))
# # # [24 15 36 35 41 33 43 12 36 37 35 45 29 16 14]
# # # [36 35 41 33 43 36 37 35 45 29]
# # # [24 15  0  0  0  0  0 12  0  0  0  0  0 16 14]
# # # 11

# # Task 5.1

# random_array = np.random.randint(10,51,size=15)
# print(random_array)

# # Task 5.2
# arr25=random_array[random_array>25]
# print(arr25)

# modified_array=random_array.copy()
# modified_array[random_array<30]=0
# print(modified_array)

# count_div_5=np.sum(random_array%5==0)
# print(count_div_5)
# # [19 14 32 11 29 34 42 36 18 46 35 32 38 20 15]
# # [32 29 34 42 36 46 35 32 38]
# # [ 0  0 32  0  0 34 42 36  0 46 35 32 38  0  0]
# # 3

# Task 6

arr=np.linspace(0,1,10)
print(arr)
# [0.         0.11111111 0.22222222 0.33333333 0.44444444 0.55555556
#  0.66666667 0.77777778 0.88888889 1.        ]

mat=np.eye(4,4)
print(mat)
# [[1. 0. 0. 0.]
#  [0. 1. 0. 0.]
#  [0. 0. 1. 0.]
#  [0. 0. 0. 1.]]

arr=np.random.randint(1,101,20)
print(arr)
# [17 80 90 65 30 56  5 77 75 62 80 20 75 85 91  1 73  1 82 87]
arr.sort()
print(arr)
# [ 1  1  5 17 20 30 56 62 65 73 75 75 77 80 80 82 85 87 90 91]
print(arr[-5:])
# [82 85 87 90 91]



# Task 7
import time
a=np.random.rand(100,100)
b=np.random.rand(100,100)
print(a)
print(b)

start=time.time()
mat=np.dot(a,b)
print(a)

det=np.linalg.det(mat)
print(det)

inverse=np.linalg.inv(mat)
print(inverse)

end=time.time()
total_time=end-start
print(f'time taken: {total_time:.6f}')

# [[0.52213391 0.44322744 0.97784276 ... 0.30464575 0.79721791 0.75270082]
#  [0.32841324 0.61377006 0.05449847 ... 0.61953293 0.76539316 0.60739394]
#  [0.02470264 0.30261024 0.93870896 ... 0.48448359 0.02208565 0.36150226]
#  ...
#  [0.91353655 0.34565421 0.58791008 ... 0.30306229 0.3983776  0.01578933]
#  [0.10834813 0.29729324 0.08226246 ... 0.23676907 0.6872816  0.23492014]
#  [0.22834317 0.23819358 0.59820235 ... 0.69539883 0.06529525 0.78083775]]
# [[0.14454998 0.9804814  0.86334926 ... 0.29294413 0.08678173 0.00569517]
#  [0.79345262 0.88234796 0.03759228 ... 0.53340838 0.17032223 0.16397387]
#  [0.12182465 0.55134108 0.65747866 ... 0.54334627 0.85043341 0.79105568]
#  ...
#  [0.1878298  0.30980236 0.27205587 ... 0.41183965 0.86970939 0.89807866]
#  [0.03928859 0.88559894 0.83156167 ... 0.46017743 0.25963086 0.14256173]
#  [0.05938395 0.99494157 0.07440203 ... 0.26471949 0.06353378 0.51912729]]
# [[0.52213391 0.44322744 0.97784276 ... 0.30464575 0.79721791 0.75270082]
#  [0.32841324 0.61377006 0.05449847 ... 0.61953293 0.76539316 0.60739394]
#  [0.02470264 0.30261024 0.93870896 ... 0.48448359 0.02208565 0.36150226]
#  ...
#  [0.91353655 0.34565421 0.58791008 ... 0.30306229 0.3983776  0.01578933]
#  [0.10834813 0.29729324 0.08226246 ... 0.23676907 0.6872816  0.23492014]
#  [0.22834317 0.23819358 0.59820235 ... 0.69539883 0.06529525 0.78083775]]

# 8.021944957025347e+50


# [[ -5.1834503    5.94917891   0.25012375 ...   0.09598439  -0.12415412
#     0.07158448]
#  [ 30.80829506 -35.87042373  -3.51717482 ...  -4.00382515   2.53847662
#    -2.80957397]
#  [ 40.78413476 -44.63069481  -4.72785703 ...  -6.20581599   1.65357284
#    -3.53230705]
#  ...
#  [-16.74236376  18.57751904   1.79646964 ...   2.40313548  -1.06778037
#     1.40816545]
#  [  3.89289992  -2.72301531  -0.44362287 ...  -1.52206725  -1.03973606
#    -0.06129171]
#  [-13.84662573  15.48545747   1.63419817 ...   1.95045142  -0.65786836
#     1.01376445]]

# time taken: 0.404251
